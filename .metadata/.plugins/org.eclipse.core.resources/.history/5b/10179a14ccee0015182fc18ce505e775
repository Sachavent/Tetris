package InterfaceGraphique;

import java.awt.Color;
import java.awt.Graphics;

import javax.swing.JComponent;

import DeroulementJeu.Deroulement;
import GestionFichier.Pieces;

// C'est la fonction qui s'occupe uniquement de l'affichage
// La fonction est appelé dans la classe déroulement
// Cette classe est appelé dès qu'on a besoin d'update l'affichage
public class RenderBoard extends JComponent {
	  private int pas_vertical;
	  private int pas_horizontal;
	  private int width_rect;
	  private int height_rect;
	  public int[][] plateau;

	  
	  public void paint(Graphics g) {
		  	// Initialisation des variables.
			pas_vertical=0;
		  	pas_horizontal=0;
		  	width_rect=20;
		  	height_rect=20;
		  	plateau= Deroulement.getBoard();
		  	

		  	
		 // Dessine piece courante
		  	int compteur=0;		
			for (int i=Pieces.position_piececourante[0]; i < Pieces.position_piececourante[0]+4; i++) {
				for (int j=Pieces.position_piececourante[1]; j < Pieces.position_piececourante[1]+4; j++) {
					if (compteur < 16) {
					if (Deroulement.piece_courante[Pieces.rotation_piececourante][compteur]>0) {
						fill_piececourante(g,i,j,width_rect, height_rect);
					}
					}
					compteur++;
					}
			}

		  	
		 // Dessine le plateau
		  	for (int i=0; i < Fenetre.NUM_LIGNE_TETRIS; i++) {
		  		// Quand il y a un retour à la ligne (On indique qu'il faut changer la valeur du Y)
		  		if (i>0) {
		  		pas_vertical+=height_rect;
		  		pas_horizontal=0;
		  		}
		  		for (int j=0; j < Fenetre.NUM_COL_TETRIS; j++) {
		  			//On se déplace sur les colonnes donc on on fait un pas de la largeur du rectangle
		  			g.drawRect ((40+pas_horizontal), (30+pas_vertical), width_rect, height_rect);
		  			
		  			// Si la case est pleine
		  			if (plateau[i][j]>0) {
		  				// Alors on "remplit" la case
		  				
		  				fill_board(g,i,j,width_rect, height_rect);
		  			}
		  			pas_horizontal+=width_rect;
		  		}
		  	}
		  	
		  	// raffiche le contenu du Tetris quand il y a un UPDATE du Board
		  	repaint();
		     
	  }
	  
	  // Fonction permettant de dire qu'une case est occupée
	  public void fill_piececourante(Graphics g,int ligne, int col, int width_rect, int height_rect) {
		  System.out.println("Piece courante: " Deroulement.numeropiece);
		  switch(Deroulement.numeropiece) {
		  case 1:
			  g.setColor(Color.BLACK);
		  case 2:
			  g.setColor(Color.BLUE);
		  case 3:
			  g.setColor(Color.RED);
		  case 4:
			  g.setColor(Color.GREEN);
		  case 5:
			  g.setColor(Color.PINK);
		  case 6:
			  g.setColor(Color.ORANGE);
		  case 7:
			  g.setColor(Color.YELLOW);
		  }
		  
		  g.fillRect(40+(width_rect*col), 30+(height_rect*ligne), width_rect, height_rect);
	  }
	  
	  public void fill_board(Graphics g,int ligne, int col, int width_rect, int height_rect) {
		  g.setColor(Color.BLACK);  
		  g.fillRect(40+(width_rect*col), 30+(height_rect*ligne), width_rect, height_rect);
		  g.setColor(Color.BLACK);
	  }
	  
}
