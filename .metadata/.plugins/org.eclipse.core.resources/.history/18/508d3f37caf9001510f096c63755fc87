package DeroulementJeu;

import GestionFichier.Pieces;
import InterfaceGraphique.Fenetre;
import Launcher.Launcher;

public class DescendrePieces {
	
	// Classe qui gère la descente des pieces
	
	private static boolean flag_onemorezero=false;
	public static boolean create_new_piece;
	private static int [][]piececourante= Deroulement.getpiece_courante();
	
	
	// Valeur qui indique de combien de ligne max on peut augmenter sans quitter le plateau
	public static void launch() {
		while (Perdu.isItLoose()==false) {
		try {
			// Descend le plateau toute les seconde
			// 1000 == 1 seconde
			Thread.sleep(500);
			
			// On appelle la fonction qui supprime les lignes en cas de besoin
			SuppressionLigne.suppressionLignePlateau(Deroulement.Board);
			
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		// Permet de connaître l'indice de la piece la plus en bas.
	  	int compteur=0;
	  	int maxligne=0;
		for (int i=Pieces.position_piececourante[0]; i < Pieces.position_piececourante[0]+4; i++) {
			for (int j=Pieces.position_piececourante[1]; j < Pieces.position_piececourante[1]+4; j++) {
				if (compteur < 16) {
					if (piececourante[Pieces.rotation_piececourante][compteur]>0 && compteur/4>maxligne) {
						// Le min corresponds à l'indice de la colonne le plus en bas de la piece courante
						maxligne=compteur/4;
					}
				}
				compteur++;
				
				}
		}

		
		// On regarde si  la piece sort du plateau quand elle avance
		// Si oui, alors on l'intègre au board et on crée une nouvelle piece
		if (Pieces.position_piececourante[0]+maxligne+2 > Fenetre.NUM_LIGNE_TETRIS ) {
		  	compteur=0;		
			for (int i=Pieces.position_piececourante[0]; i < Pieces.position_piececourante[0]+4; i++) {
				for (int j=Pieces.position_piececourante[1]; j < Pieces.position_piececourante[1]+4; j++) {
					if (compteur < 16) {
					if (piececourante[Pieces.rotation_piececourante][compteur]>0) {
						plateau[i][j]=piececourante[Pieces.rotation_piececourante][compteur];
					}
					}
					compteur++;
					}
			}
			Deroulement.setBoard(plateau);
			
			// Flag pour indiquer qu'il faut créer une nouvelle piece
			// Créer une nouvelle piece correspond à "supprimer" la piece courante
			synchronized (Deroulement.lock) {
			create_new_piece=true;
			}
			// On incrémente la position s'il n'y a pas de problème...
		} else {
			// Retour false, indique que la piece n'est pas bloqué
			if (BlocagePieces.bloqueparboard(Deroulement.getBoard(),Deroulement.getpiece_courante())==false) {
				 Pieces.position_piececourante[0]+=1;
				
			} else {
				// alors la piece est bloqué! Il faut donc créer une nouvelle piece!
				// Il faut également intégrer la pièce courante au board.
			  	compteur=0;		
				for (int i=Pieces.position_piececourante[0]; i < Pieces.position_piececourante[0]+4; i++) {
					for (int j=Pieces.position_piececourante[1]; j < Pieces.position_piececourante[1]+4; j++) {
						if (compteur < 16) {
						if (piececourante[Pieces.rotation_piececourante][compteur]>0) {
							plateau[i][j]=piececourante[Pieces.rotation_piececourante][compteur];
						}
						}
						compteur++;
						}
				}
				Deroulement.setBoard(plateau);
				// Flag pour indiquer qu'il faut créer une nouvelle piece
				synchronized (Deroulement.lock) {
				create_new_piece=true;
				}
			}
			
		}				

	}
	}
	
	
}
